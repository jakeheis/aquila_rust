// 4 + -5 == 8 && !!false   ;
// 4 < 3 * 1;
// 4 + * 2

// let alpha = true && 3 == 4;

// alpha: int + 2

// alpha = 3;

// if true == false {

// } else 4 + 2

// let a = 4 + 1 + +;

//def add(lhs: int, rhs: int): int {
    //lhs + rhs;
//}

// add(4, rhs * 3);
// lhs.rhs;
// lhs.add(4, rhs * 3).smt;    

// def add(third: int): int {
   // lhs + rhs + third
// }

def first[T](object: T) {
  second[T](object);
}

def second[T](object: T) {
    4 + 5;
}

first("hello");
first(3);

let numbers =  [1,2,3];

type Adder[T] {
  let lhs: int;
  let rhs: int;

  def add(third: int): int {
    let result = lhs + rhs + third;
    rhs = rhs + result;
    return result;
  }

  def add_both(third: [int; 2]) {
    print add(third[0]);
    print add(third[1]);
  }

  def add_mysterious[U](object: U, other: T): T {
    return other;
  }

  meta def example(): Adder[T] {
    return Adder[T](1, 2);
  }
}

let customized_adder = Adder[Adder[int]](3, 4);

let vec_int = Vec.new[int]();
vec_int.insert(4);
vec_int.insert(6);
print *(vec_int.get[int](1));

let vec = Vec.new[Adder[byte]]();
 
vec.insert(Adder[int](10, 2));
vec.insert(Adder[int](3, 4));

print (*vec.get[Adder[int]](1)).add(2);

print Adder[int](1, 2).add(2);

let adders: [Adder[int]; 3] = [Adder[int](1, 2), Adder[int](3,4), Adder[int](5,6)];

for add in adders {
  print (*add).add(5);
}

let dyn = String.from("hello");

let combo1 = dyn.append_literal(" world");
combo1.print_str();

let combo2 = combo1.append_literal(" ag");
combo2.print_str();

dyn.append_literal(" world").append_literal(" again").print_str();

print dyn.append_literal(" world").append_literal(" again 2").storage;

let here = dyn.append_literal(" world").append_literal(" again 3");
print here.storage;

/*
let first_adder = vec.get|Adder|(0);
let second_adder = vec.get|Adder|(1);

print (*first_adder).add(4);
print (*second_adder).add(4);



for i in [0, 11, 22] {
  print *i;
}

for add in adders {
  print (*add).add(5);
}

adders[0].add_both([3, 4]);

let arr_ptr = &adders;

let count = 0;
while count < 3 {
  print adders[count].add(3);
  count = count + 1;
}*/

/*
enum Hello {
  case one;
  case two;
}
*/

// let input = read_line();
// String.from("Got: ").append(input).print_str();


/*let sum = Adder(4, 5);
print sum.add(6);

let look: ptr Adder = &sum;

let copy = *look;
print copy.add(3);

let storage = allocate(6);
*/
// -1;
// !2;

// false > 2 * 1 == false;

// 4 + false;

//let a: int = 1 == 2;

//def add(third: int, fourth: int): int {
  //lhs + rhs + third;
//}

// add(3, true);

/*
def add(a: int, b: int): int {
  return a + b;
}

type Hey {
  let a: int;
  
  def sup(b: int): int {
    if a == b {
      return 4;
    }
    return a;
  }

  def new(starter: int): Hey {
    let re: Hey;
    re.a = starter;
    return re;
  }
}

let hi: Hey;
hi.a = 0;

hi.new.a = 7;
*/
/*
let temp = add(1, 2);
let t2 = hi.sup(6);

print temp;
print t2;

let my_str: StringLiteral = "hello";

print my_str;

def fib(num: int): int {
  if num == 0 {
    return 0;
  }
  if num == 1 {
    return 1;
  }
  return fib(num - 2) + fib(num - 1);
}

print fib(1);
print;
print fib(3);
print;
print fib(5);
*/
