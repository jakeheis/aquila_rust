// 4 + -5 == 8 && !!false   ;
// 4 < 3 * 1;
// 4 + * 2

// let alpha = true && 3 == 4;

// alpha: int + 2

// alpha = 3;

// if true == false {

// } else 4 + 2

// let a = 4 + 1 + +;

//def add(lhs: int, rhs: int): int {
    //lhs + rhs;
//}

// add(4, rhs * 3);
// lhs.rhs;
// lhs.add(4, rhs * 3).smt;    

// def add(third: int): int {
   // lhs + rhs + third
// }

type First {
    let other: Second;
}

type Second {
  let fake: Third;
}

type Third {
  let fake: int;
      def method(): First {
      let o: First;
      return o;
    }
}

//type Adder {
  //  let lhs: int;
   //let rhs: bool

    //def add(third: int): int {
      //  lhs + rhs + third;
    //}
//}

// -1;
// !2;

// false > 2 * 1 == false;

// 4 + false;

//let a: int = 1 == 2;

//def add(third: int, fourth: int): int {
  //lhs + rhs + third;
//}

// add(3, true);

/*
def add(a: int, b: int): int {
  return a + b;
}

type Hey {
  let a: int;
  
  def sup(b: int): int {
    if a == b {
      return 4;
    }
    return a;
  }

  def new(starter: int): Hey {
    let re: Hey;
    re.a = starter;
    return re;
  }
}

let hi: Hey;
hi.a = 0;

hi.new.a = 7;
*/
/*
let temp = add(1, 2);
let t2 = hi.sup(6);

print temp;
print t2;

let my_str: StringLiteral = "hello";

print my_str;

def fib(num: int): int {
  if num == 0 {
    return 0;
  }
  if num == 1 {
    return 1;
  }
  return fib(num - 2) + fib(num - 1);
}

print fib(1);
print;
print fib(3);
print;
print fib(5);
*/
