builtin def malloc(count: int): ptr byte {}
builtin def strlen(location: ptr byte): int {}
builtin def memcpy(to: ptr byte, from: ptr byte, length: int): int {}

builtin def ptr_offset(pointer: ptr byte, distance: int): ptr byte {}
builtin def _read_line(): ptr byte {}

def read_line(): String {
    return String.from(_read_line());
}

type FatPointer {

    let size: int;
    let location: ptr byte;

    meta def heap_alloc(size: int): FatPointer {
        let location = malloc(size);
        return FatPointer(size, location);
    }

}

/*
type SizedCollectionIterator {
    let location: ptr void;
    let count: int;
    let offset: int;
}
*/

type String {
    
    let storage: FatPointer;

    meta def from(lit: ptr byte): String {
        let pointer = FatPointer(strlen(lit) + 1, lit);
        return String(pointer);
    }

    def append_literal(lit: ptr byte): String {
        let size = storage.size + strlen(lit);
        let new_storage = FatPointer.heap_alloc(size);
        
        memcpy(new_storage.location, storage.location, storage.size - 1);

        let second = ptr_offset(new_storage.location, storage.size - 1);
        memcpy(second, lit, strlen(lit) + 1);

        return String(new_storage);
    }

    def append(string: String): String {
        return append_literal(string.storage.location);
    }

    def print_str() {
        print storage.location;
    }

}

/*
type Vec {

    let storage: FatPointer;

    meta from(array: )

}
*/
