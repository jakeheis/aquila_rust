builtin def malloc(count: int): ptr any;
builtin def realloc(location: ptr any, count: int): ptr any;
builtin def free(location: ptr any);
builtin def memcpy(to: ptr any, from: ptr any, length: int): int;
builtin def sizeof(object: any): int;
builtin def exit(code: int);

builtin def strlen(location: ptr byte): int;
builtin def snprintf(buffer: ptr byte, size: int, format: ptr byte, arg: any): int;
builtin def dprintf(fd: int, format: ptr byte, arg: any);

builtin def ptr_offset(pointer: ptr any, distance: int): ptr any;
builtin def _read_line(): ptr byte;

pub type Memory {

    builtin meta def size[T](): int;

    meta def size_instance[T](instance: T): int {
        return sizeof(instance);
    }
    
    meta def allocate[T](): ptr T {
        return cast[ptr T](malloc(size[T]()));
    }

    meta def allocate_block[T](count: int): ptr T {
        return cast[ptr T](malloc(size[T]() * count));
    }

    meta def reallocate[T](current: ptr T, count: int): ptr T {
        return cast[ptr T](realloc(current, count * sizeof(T)));
    }

    meta def copy[T](from: ptr T, to: ptr T) {
        copy_block[T](from, to, 1);
    }

    meta def copy_block[T](from: ptr T, to: ptr T, count: int) {
        memcpy(to, from, count * sizeof(T));
    }

    meta def offset[T](pointer: ptr T, count: int): ptr T {
        return cast[ptr T](ptr_offset(pointer, count * sizeof(T)));
    }

    meta def drop[T](loc: ptr T) {
        free(loc);
    }

    builtin meta def stack_buffer[T](length: int): ptr T;

}

pub def print[T](obj: T) {
    let buffer = StringBuffer.new();

    let has_written = false;

    #if T: Writable  {
        obj.write(@buffer);
        has_written = true;
    }

    #if T == int {
        buffer.push_int(obj);
        has_written = true;
    }
    #if T == double {
        buffer.push_double(obj);
        has_written = true;
    }
    #if T == bool {
        buffer.push_bool(obj);
        has_written = true;
    }
    #if T == ptr byte {
        buffer.push(obj);
        has_written = true;
    }

    if has_written == false {
        #if T: AnyObject {
            buffer.push(obj._name());
            has_written = true;
        }
        if has_written == false {
            buffer.push("<ptr or ref>");
        }
    }

    Stream.stdout().writeln(@buffer.content);
}

pub def read_line(): String {
    return String.literal(_read_line());
}

pub def fatal_error(message: ptr byte, #caller) {
    fatal_error_location(message, caller);
}

pub def fatal_error_location(message: ptr byte, location: ptr byte) {
    print(String.literal("Fatal error: ").append_literal(message).storage);
    print("");
    print(location);
    exit(1);
}

/*
type SizedCollectionIterator {
    let location: ptr void;
    let count: int;
    let offset: int;
}
*/

pub type String {
    
    let storage: ptr byte;
    let size: int;
    let owned: bool;

    pub meta def literal(lit: ptr byte): String {
        let size = strlen(lit) + 1;
        return String(lit, size, false);
    }

    pub meta def empty(): String {
        return String.literal("");
    }

    pub def append_literal(lit: ptr byte): String {
        let new_size = size + strlen(lit);

        let new_storage = Memory.allocate_block[byte](new_size);
        Memory.copy_block[byte](storage, new_storage, size - 1);

        let second_part = Memory.offset[byte](new_storage, size - 1);
        Memory.copy_block[byte](lit, second_part, strlen(lit) + 1);

        return String(new_storage, new_size, true);
    }

    pub def append(string: ref String): String {
        return append_literal(string.storage);
    }

}

impl String: Writable {
    def write(buffer: ref StringBuffer) {
        buffer.push("'");
        buffer.push(storage);
        buffer.push("'");
    }
}

impl String: Freeable {
    def free() {
        if owned {
            Memory.drop[byte](storage);
        }
    }
}

pub type Range {

    let start: int;
    let end: int;

    pub meta def length(start: int, length: int): Range {
        return Range(start, start + length);
    }

    pub meta def bounds(start: int, end: int): Range {
        return Range(start, end + 1);
    }

}

impl Range: Iterable {}

pub type Vec[T] {

    let storage: ptr T;
    pub let count: int;
    pub let capacity: int;

    pub meta def new(): Vec[T] {
        return Vec[T](cast[ptr T](&0), 0, 0);
    }

    pub def push(object: T) {
        if count == capacity {
            if capacity == 0 {
                capacity = 10;
                storage = Memory.allocate_block[T](capacity);
            } else {
                capacity = capacity * 2;
                storage = Memory.reallocate[T](storage, capacity);
            }
        }

        copy_in(count, &object);

        count = count + 1;
    }

    pub def get(index: int, #caller): ptr T {
        if index >= count {
            fatal_error_location("index out of bounds", caller);
        }
        return Memory.offset[T](storage, index);
    }

    pub def first(): Optional[ptr T] {
        if count > 0 {
            return Optional[ptr T].some(storage);
        } else {
            return Optional[ptr T].none();
        }
    }

    pub def replace(index: int, object: T, #caller) {
        if index > count {
            fatal_error_location("index out of bounds", caller);
        }
        if index == count {
            push(object);
        } else {
            copy_in(index, &object);
        }
    }

    pub def pop(#caller): T {
        if count == 0 {
            fatal_error_location("can't pop from empty vector", caller);
        }
        count = count - 1;
        return *Memory.offset[T](storage, count);
    }

    def copy_in(index: int, object: ptr T) {
        let location = Memory.offset[T](storage, index);
        Memory.copy[T](object, location);
    }

}

/*
Passing object itself must be either move or copy
*/

impl Vec: Writable {
    def write(buffer: ref StringBuffer) {
        buffer.push("Vec");
        #if T: Writable {
            buffer.push("(");
            let first = true;
            for obj in self {
                if first == false {
                    buffer.push(", ");
                }
                first = false;
                obj.write(buffer);
            }
            buffer.push(")");
        }
    }
}

impl Vec: Iterable {}

impl Vec: Freeable {
    def free() {
        #if T: AnyObject {
            for obj in self {
                obj.deinit();
            }
        }
        if capacity > 0 {
            Memory.drop[T](storage);
        }
    }
}

pub type Optional[T] {

    let _is_some: bool;
    let object: T;

    pub meta def some(object: T): Optional[T] {
        return Optional[T](true, object);
    }

    pub meta def none(): Optional[T] {
        return Optional[T](false, cast[T](0));
    }

    pub def is_some(): bool {
        return _is_some;
    }

    pub def is_none(): bool {
        return !_is_some;
    }

    pub def unwrap(#caller): ptr T {
        if _is_some == false {
            fatal_error_location("unwrapped a nil value", caller);
        }
        return &object;
    }
}

impl Optional: Writable {
    def write(buffer: ref StringBuffer) {
        if _is_some {
            buffer.push("Some");
            #if T: Writable {
                buffer.push("(");
                object.write(buffer);
                buffer.push(")");
            }
        } else {
            buffer.push("None");
        }
    }
}

pub type Stream {

    let fd: int;

    pub meta def stdout(): Stream {
        return Stream(1);
    }

    pub meta def stderr(): Stream {
        return Stream(2);
    }

    pub def write(str: ref String) {
        dprintf(fd, "%s", str.storage);
    }

    pub def writeln(str: ref String) {
        dprintf(fd, "%s\n", str.storage);
    }

}

// ref cannot be stored
// box StringBuilder is ref counted Box
// can be demoted to ref StringBuilder
// ref or box can be unsafely saved as ptr

pub type StringBuffer {

    pub let content: String;

    pub meta def new(): StringBuffer {
        return StringBuffer(String.empty());
    }

    pub def push(str: ptr byte) {
        content = content.append_literal(str);
    }

    pub def push_int(value: int) {
        push_primitive("%i", value);
    }

    pub def push_double(value: double) {
        push_primitive("%g", value);
    }

    pub def push_bool(value: bool) {
        if value {
            push("true");
        } else {
            push("false");
        }
    }

    def push_primitive[T](format: ptr byte, value: T) {
        let initial_buffer = Memory.stack_buffer[byte](1);
        let length = snprintf(initial_buffer, 1, format, value);

        let actual_buffer = Memory.stack_buffer[byte](length + 1);
        snprintf(actual_buffer, length + 1, format, value);

        content = content.append_literal(actual_buffer);
    }

}

pub def copy[T](obj: T): T where T: Copyable {
    let buffer: T;
    obj.copy(cast[ptr any](&buffer));
    return buffer;
}

pub type Box[T] {
    let box_impl: ptr BoxImpl[T];

    pub meta def new(obj: T): Box[T] {        
        let box_heap = Memory.allocate[BoxImpl[T]]();
        *box_heap = BoxImpl[T].new(obj);
        return Box[T](box_heap);
    }

    pub def as_ptr(): ptr T {
        return (*box_impl).object;
    }
}

impl Box: Copyable {
    def copy(into: ptr any) {
        let destination = cast[ptr Box[T]](into);
        (*destination).box_impl = self.box_impl;
        (*box_impl).retain();
    }
}

impl Box: Freeable {
    def free() {
        let dead = (*box_impl).release();
        if dead {
            (*box_impl).deinit();
            Memory.drop(box_impl);
        }
    }
}

type BoxImpl[T] {
    let object: ptr T;
    let count: int;

    meta def new(obj: T): BoxImpl[T] {
        let heap = Memory.allocate[T]();
        *heap = obj;
        return BoxImpl[T](heap, 1);
    }

    def retain() {
        count = count + 1;
    }

    def release(): bool {
        count = count - 1;
        return count == 0;
    }
}

impl BoxImpl: Freeable {
    def free() {
        Memory.drop(object);
    }
}

trait Copyable {
    def copy(into: ptr any);
}

trait Writable {
    def write(buffer: ref StringBuffer);
}

trait Freeable {
    def free();
}

trait Iterable {}

/*trait Iterable {
    def iter_count(): int;
    def at_index(index: int): ptr any;
}*/

// trait Indexable {
//     type T; 
//     def at_index(): ptr T;
// }

trait AnyObject {
    // TODO: make this a meta requirement when they are supported
    def _name(): ptr byte;
    def deinit();
}
