let my_vec: Vec[int] = Vec[int].new();
my_vec.push(8);
my_vec.push(4);
my_vec.push(7);

/// -> 8
print[int](*my_vec.get(1) * 2);

/// -> 5
my_vec.replace(0, 5);
print[int](*my_vec.get(0));

/// -> 5
/// -> 4
/// -> 7
for num in @my_vec {
    print[int](*num);
}

/// -> 7
print[int](my_vec.pop());
/// -> 4
print[int](my_vec.pop());

let vec_of_vecs: Vec[Vec[bool]] = Vec[Vec[bool]].new();
vec_of_vecs.push(Vec[bool].new());
vec_of_vecs.push(Vec[bool].new());

/// -> Vec(Vec, Vec)
print[Vec[Vec[bool]]](vec_of_vecs);

(*vec_of_vecs.get(1)).push(false);
(*vec_of_vecs.get(1)).push(true);

/// -> true
print[bool](*(*vec_of_vecs.get(1)).get(1));

/// -> 2
print[int](vec_of_vecs.count);

def get_count(vec: ref Vec[Vec[bool]]) {
    print[int](vec.count);
}

/// -> 2
get_count(@vec_of_vecs);

/// error
print[int](my_vec.element_size);
/// end
